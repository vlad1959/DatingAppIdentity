using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using AutoMapper;
using CloudinaryDotNet;
using CloudinaryDotNet.Actions;
using DatingApp.API.Data;
using DatingApp.API.Dtos;
using DatingApp.API.Helpers;
using DatingApp.API.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Options;

namespace DatingApp.API.Controllers
{
    [Authorize]
    [Route("api/users/{userId}/photos")]
    [ApiController]
    public class PhotosController : ControllerBase
    {
        private readonly IDatingRepository _repo;
        private readonly IMapper _mapper;
        private readonly IOptions<CloudinarySettings> _cloudinaryConfig;

        private Cloudinary _cloudinary;

        public PhotosController(IDatingRepository repo, IMapper mapper, IOptions<CloudinarySettings> cloudinaryConfig)
        {
            _repo = repo;
            _mapper = mapper;
            _cloudinaryConfig = cloudinaryConfig;

            //cloudinary package
            Account acc = new Account(
                _cloudinaryConfig.Value.CloudName,
                _cloudinaryConfig.Value.ApiKey,
                _cloudinaryConfig.Value.ApiSecret
            );
            _cloudinary = new Cloudinary(acc);
        }

        [HttpGet("{id}", Name="GetPhoto")]
        public async Task<IActionResult>GetPhoto(int id)
        {
            var photoFromRepo = await _repo.GetPhoto(id);

            //populate PhotoForReturnDto from photo from repo
            //this dto is used to remove user data taht are presnet in photo from repo
            var photo = _mapper.Map<PhotoForReturnDto>(photoFromRepo);
            return Ok(photo);
        }

        [HttpPost]
        //userid will come from URL: api/users/{userId}/photos
        //PhotoForCreationDto - this is data that angular will send to API
        public async Task<IActionResult> AddPhotoForUser(int userId, 
          [FromForm]PhotoForCreationDto photoForCreationDto)
        {
            //if id passed does not match user id in a token - return unauthorized.
            //User object with token is available because [Authorise] is used

            if (userId != int.Parse(User.FindFirst(ClaimTypes.NameIdentifier).Value))
                return Unauthorized();

            var userFromRepo = await _repo.GetUser(userId);

            var file = photoForCreationDto.File;

            var uploadResult = new ImageUploadResult(); //this is from cloudinary pacakge (loaded with nuget package manager)

            if (file.Length > 0)
            {

                using (var stream = file.OpenReadStream())
                {
                    var uploadParams = new ImageUploadParams() //from cloudinary package
                    {
                        File = new FileDescription(file.Name, stream),
                        Transformation = new Transformation().Width(500).Height(500).Crop("fill").Gravity("face")
                    };
                    uploadResult = _cloudinary.Upload(uploadParams);

                    photoForCreationDto.Url = uploadResult.Uri.ToString();
                    photoForCreationDto.PublicId = uploadResult.PublicId;

                    //map (update) photo object (model) with data from dto
                    var photo = _mapper.Map<Photo>(photoForCreationDto);

                    //if no photo is presnt with IsMain equals false, then make this phot main
                    if (userFromRepo.Photos.Any(u => u.IsMain) == false) 
                        photo.IsMain = true;

                    userFromRepo.Photos.Add(photo);

                    if (await _repo.SaveAll()) 
                    {
                        //this will map data from photo object that has just been saved to db
                        //with to returndto, this will include id, generated by the server
                        var photoToReturn = _mapper.Map<PhotoForReturnDto>(photo);
                        //this will execute HTTPGet with name=GetPhoto
                        return CreatedAtRoute("GetPhoto", new { id=photo.Id }, photoToReturn);
                    }
                    else 
                      return BadRequest("Could not add the photo");
              
                }
            }
            else
               return BadRequest("File s empty");
        }

        // this post request to this url will be used to set isMain indicator for the photo
        //although put request usually used to update in restful API
        [HttpPost("{id}/setMain")]
        //userid will come from URL: api/users/{userId}/photos/{id}/setMain
        public async Task<IActionResult> SetMainPhoto(int userId, int id)
        {
            if (userId != int.Parse(User.FindFirst(ClaimTypes.NameIdentifier).Value))
                return Unauthorized();

            var user = await _repo.GetUser(userId);

            //check if phot id exists in user's collection of photos
            if (!user.Photos.Any(p => p.Id == id))
               return Unauthorized();

            var photoFromRepo = await _repo.GetPhoto(id);

            if (photoFromRepo.IsMain)
               return BadRequest("This is already main photo");   

            var currentMainPhoto = await _repo.GetMainPhotoForUser(userId);
            currentMainPhoto.IsMain = false;

            photoFromRepo.IsMain = true;

            if (await _repo.SaveAll())
               return NoContent();

            return BadRequest("Could not set photo to main");
        }

        [HttpDelete("{id}")]
        //userid will come from URL: api/users/{userId}/photos/{id}
        public async Task<IActionResult> DeletePhoto(int userId, int id)
        {

            if (userId != int.Parse(User.FindFirst(ClaimTypes.NameIdentifier).Value))
                return Unauthorized();
            var user = await _repo.GetUser(userId);

            //check if phot id exists in user's collection of photos
            if (!user.Photos.Any(p => p.Id == id))
                return Unauthorized();

            var photoFromRepo = await _repo.GetPhoto(id);

            if (photoFromRepo.IsMain)
                return BadRequest("You cannot delete your main photo");

            //publicid returned by cloudinary when photo is uploaded there 
            if (photoFromRepo.PublicId != null)
            {
                var deleteParams = new DeletionParams(photoFromRepo.PublicId);
                var result = _cloudinary.Destroy(deleteParams);
                if (result.Result == "ok")
                {
                    _repo.Delete(photoFromRepo);
                }
            }
            else {
                 _repo.Delete(photoFromRepo);
            }

            if (await _repo.SaveAll())
                return Ok();

            return BadRequest("Failed to delete the photo");

        }
    }
}
